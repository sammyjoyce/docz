<title>
Implement Core Agent Loop + OAuth (Zig 0.15.1): end‑to‑end, spec‑accurate, minimal diffs.
</title>

<context>
Repository uses Zig 0.15.1 with source under `src/` and shared subsystems under `src/foundation/{cli,tui,render,ui,network,tools,term}`. Barrels export namespaces (e.g., `src/foundation/network.zig`). You will encounter partial implementations and drifted modules.
</context>

<role_and_behavior>
- Operate autonomously: finish the task before handing back.
- Make reasonable assumptions without asking for confirmation; document them inline in commit messages or module comments.
- Prefer editing/wiring existing code over adding files. Keep diffs minimal and focused.
- Keep text output concise; save details for code and tests. Summarize deliverables at the end.
- Reasoning effort: high for API/ABI design and cross‑module wiring; medium for repetitive edits after the plan is set.
</role_and_behavior>

<repo_rules>
- No `usingnamespace`; keep imports alphabetical (std first). Use `std.Io` Reader/Writer.
- Never expose `anyerror`. Public APIs have narrow error sets; use `try` and `errdefer` for cleanup.
- Single‑entry structs: each module’s primary type uses `const Self = @This();` with explicit dependency injection (allocator, logger, http, clock, fs).
- Avoid globals; use vtable‑style dispatch only where runtime selection is required.
- Feature‑gate with `build_options` when flags affect multiple files.
- Run `zig fmt`. Do not fix unrelated issues.
</repo_rules>

<objectives>
A) Core Agent Loop (minimal viable, ~300 LoC target)
- Event loop: capture user input → call Anthropic Messages → execute tool results if present → display output.
- Streaming (SSE): support `message_start`, `content_*` deltas, `message_delta`, `message_stop`; accumulate tool JSON only after `content_block_stop`.
- Context hygiene: one activity per inference window; aggressively trim history; optional summarization hook.

B) OAuth + Anthropic Bearer Integration
- Loopback OAuth with PKCE S256 and separate high‑entropy `state`.
- Callback: bind to loopback; host `localhost`, exact path `/callback`, ephemeral or configured port (default 8080). Verify `state` and the exact `redirect_uri` used.
- Token JSON POST to `https://console.anthropic.com/v1/oauth/token`.
  - Exchange: `{ grant_type:"authorization_code", code, code_verifier, client_id, redirect_uri, state }`
  - Refresh: `{ grant_type:"refresh_token", refresh_token, client_id }`
- Storage: credentials JSON with mode 0600: `{ type:"oauth", access_token, refresh_token, expires_at }`. Compute absolute `expires_at` and proactively refresh (≥60–120s skew). Swap atomically.
- API calls to `https://api.anthropic.com/v1/messages` using:
  - `Authorization: Bearer <token>`
  - `anthropic-version: 2023-06-01`
  - Feature‑gated `anthropic-beta: oauth-2025-04-20`
  - Do **not** send `x-api-key` when OAuth is active.
- 401 recovery: refresh once then retry once.
- UX: open system browser; success page auto‑closes; copy‑paste fallback allowed. Echo the actual redirect URI. Respect `HTTP_PROXY/HTTPS_PROXY/NO_PROXY`.
- Logging: never log secrets; redact tokens; include upstream `request-id` when present; counters for refresh attempts and 401s.
</objectives>

<cli_surface>
- `{bin} auth login [--port 8080] [--host localhost] [--manual]`
- `{bin} auth status`
- `{bin} auth whoami`
- `{bin} auth logout`
- `{bin} auth test-call [--stream]`
- `{bin} run` (starts the agent REPL)
</cli_surface>

<build_options>
- `oauth_enabled` (default: true) — compiles OAuth client + CLI.
- `oauth_beta_header` (default: true) — sends `anthropic-beta: oauth-2025-04-20`.
- `streaming_enabled` (default: true) — SSE support.
- `keychain_enabled` (default: false) — store secrets in OS keychain instead of file.
- `oauth_allow_localhost` (default: true) — require `localhost` as the redirect host.
</build_options>

<module_map>
- `src/foundation/network/auth/{pkce.zig, loopback_server.zig, token_client.zig, store.zig, authorize_url.zig}`
- `src/foundation/network/anthropic.zig` (Messages client; streaming + non‑streaming)
- `src/agent.zig` (loop orchestration)
- `src/foundation/tools/*.zig` (simple registry; parallel execution support)
- `src/foundation/cli/{auth.zig, run.zig}` (wire subcommands)
- Barrels: `src/foundation/network.zig`, `src/foundation/tools.zig`, `src/foundation/cli.zig`
</module_map>

<must_haves>
- PKCE verifier length 43–128 chars; separate `state`; S256 challenge.
- Bind to loopback only; close server after first valid callback.
- Verify `state` and exact `redirect_uri` used; reject mismatches.
- Auto‑refresh before expiry; single refresh+retry on 401.
- Messages requests include required headers; **never** include `x-api-key` with OAuth.
- Files written with mode 0600; tokens redacted in logs.
- Proxy envs honored. Request‑ID surfaced when present.
</must_haves>

<tests>
Unit:
- pkce/state generators; redirect URI builder/validator.
- token JSON parsing; credential store R/W (assert 0600).
- header builder (OAuth vs API key); SSE event assembly.

Integration:
- Happy path: login → callback → exchange → store → test‑call.
- 401 then refresh; invalid/missing state; expired refresh; port conflict; proxy env present.

E2E (best‑effort):
- Manual/headless browser completes loopback; local callback receipt.

Format:
- `zig fmt` and existing import/style checks must pass.
</tests>

<acceptance>
- `{bin} auth login` writes credentials and shows success page.
- `{bin} auth status` shows type: oauth and expiry; `{bin} auth test-call` succeeds.
- Requests use Bearer + `anthropic-version` (+ beta if enabled); no `x-api-key` in OAuth mode.
- Proactive refresh works; single 401 triggers one refresh+retry.
- `{bin} run` starts REPL with streaming and tool execution.
- All unit/integration tests pass; formatting/import checks pass.
</acceptance>

<risks_and_fallbacks>
- Client registration may require a fixed port. Use `localhost` exclusively for the redirect host; if rejected, update the client registration to include `http://localhost:{port}/callback`.
- Corporate proxies may block app outbound calls; browser‑based auth should still work. Provide clear proxy diagnostics.
</risks_and_fallbacks>

<output_contract>
End with a concise summary listing:
- Files changed (key diffs).
- New CLI commands/flags (with short examples).
- Tests added (and how to run them).
- Feature flags/build options and defaults.
</output_contract>

<kickoff>
Read `specs/oauth.md` and any agent/loop docs under `docs/` or `specs/`. Inventory current OAuth, PKCE, callback server, token store, Anthropic client, CLI, barrels, and tests. Identify mocks vs production. Then implement the missing pieces and wire everything end‑to‑end.
</kickoff>
