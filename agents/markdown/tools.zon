.{
    ////////////////////////////////////////////////////////////////////////////
    // Professional-Grade Tool Registry – 2025 Edition                       //
    // Action-oriented, authority-driven, safety-hardened                     //
    ////////////////////////////////////////////////////////////////////////////
    .tool_metadata = .{
        .categories = .{
            .access = .{"access_document"},
            .engineering = .{"engineer_content"},
            .assurance = .{"validate_document"},
            .transformation = .{"transform_document"},
            .orchestration = .{"orchestrate_workflow"},
            .filesystem = .{"manage_file_system"},
        },
        .tool_attributes = .{
            .access_document = .{ .complexity = "low", .performance_cost = "low", .preferred_for = .{ "read", "search", "navigate", "discover" }, .requires_backup = false },
            .engineer_content = .{ .complexity = "medium", .performance_cost = "medium", .preferred_for = .{ "edit", "restructure", "format" }, .requires_backup = true },
            .validate_document = .{ .complexity = "high", .performance_cost = "high", .preferred_for = .{ "qa", "compliance", "lint" }, .requires_backup = false },
            .transform_document = .{ .complexity = "medium", .performance_cost = "medium", .preferred_for = .{ "convert", "generate", "template" }, .requires_backup = false },
            .orchestrate_workflow = .{ .complexity = "high", .performance_cost = "high", .preferred_for = .{ "automate", "batch", "pipeline" }, .requires_backup = true },
            .manage_file_system = .{ .complexity = "low", .performance_cost = "low", .preferred_for = .{"fs_ops"}, .requires_backup = true },
        },
        .workflow_recommendations = .{
            .discovery = .{"access_document"},
            .authoring = .{ "engineer_content", "validate_document" },
            .conversion = .{"transform_document"},
            .quality_gate = .{"validate_document"},
            .release_pipeline = .{"orchestrate_workflow"},
            .file_ops = .{"manage_file_system"},
        },
    },

    ////////////////////////////////////////////////////////////////////////////
    // 1. access_document – Secure Read & Search                               //
    ////////////////////////////////////////////////////////////////////////////
    .access_document = .{
        .description = "Authoritative interface for safe document access, targeted search, and workspace reconnaissance. Hardened against path traversal and malicious pattern injection.",
        .usage_guidelines = "Only for non-mutating operations. NEVER use for edits or writes.",
        .params = .{
            .type = "object",
            .properties = .{
                .action = .{ .type = "string", .@"enum" = .{ "read", "read_section", "search", "list", "tree" }, .description = "Desired access operation" },
                .path = .{ .type = "string", .description = "Absolute file or directory path" },
                .query = .{ .type = "string", .description = "Literal or regex search query", .minLength = 1 },
                .section = .{ .type = "string", .description = "Section identifier (heading:<text> | lines:<start>-<end>)" },
                .include = .{ .type = "array", .items = .{ .type = "string" }, .description = "Glob patterns to include", .default = .{ "*.md", "*.markdown" } },
                .exclude = .{ .type = "array", .items = .{ .type = "string" }, .description = "Glob patterns to exclude" },
                .depth = .{ .type = "integer", .minimum = 1, .maximum = 10, .default = 3, .description = "Directory traversal depth" },
                .regex = .{ .type = "boolean", .default = false, .description = "Interpret query as regex" },
                .context = .{ .type = "integer", .minimum = 0, .maximum = 20, .default = 3, .description = "Context lines around search hits" },
                .max_results = .{ .type = "integer", .minimum = 1, .maximum = 1000, .default = 100 },
            },
            .required = .{"action"},
            .conditional_requirements = .{
                .read = .{ .require = .{"path"} },
                .read_section = .{ .require = .{ "path", "section" } },
                .search = .{ .require = .{"query"} },
            },
        },
    },

    ////////////////////////////////////////////////////////////////////////////
    // 2. engineer_content – Atomic Editing Engine                              //
    ////////////////////////////////////////////////////////////////////////////
    .engineer_content = .{
        .description = "Enterprise-grade content engineering suite providing transactional edits, structural surgery, and high-fidelity formatting. Guaranteed atomicity with automatic rollback on failure.",
        .usage_guidelines = "Use solely for mutating markdown content. ALWAYS set backup=true for irreversible operations.",
        .params = .{
            .type = "object",
            .properties = .{
                .action = .{ .type = "string", .@"enum" = .{ "insert", "replace", "delete", "move", "batch_replace", "add_section", "generate_toc", "table_op", "set_metadata", "format" }, .description = "Editing operation" },
                .path = .{ .type = "string", .pattern = "^/.+\\.(md|markdown)$", .description = "Target markdown file" },
                .content = .{ .type = "string", .description = "Content payload for insert/replace", .minLength = 1 },
                .location = .{ .type = "string", .description = "Insert/move anchor (start|end|line:<n>|after:<heading>|before:<heading>)" },
                .search = .{ .type = "string", .description = "Search term or regex for replace/delete" },
                .replace = .{ .type = "string", .description = "Replacement text" },
                .scope = .{ .type = "string", .description = "Operation scope (file|section:<name>|lines:<a>-<b>)", .default = "file" },
                .is_regex = .{ .type = "boolean", .default = false },
                .backup = .{ .type = "boolean", .default = true, .description = "Create backup *.bak before change" },
                .atomic = .{ .type = "boolean", .default = true },
                .table = .{ .type = "object", .properties = .{ .op = .{ .type = "string", .@"enum" = .{ "create", "update_cell", "add_row", "add_col", "format" } }, .row = .{ .type = "integer" }, .col = .{ .type = "integer" }, .data = .{ .type = "array", .items = .{ .type = "array", .items = .{ .type = "string" } } } } },
                .metadata = .{ .type = "object", .description = "Front-matter key-values to set/update" },
                .format_opts = .{ .type = "object", .properties = .{ .wrap = .{ .type = "integer", .minimum = 60, .maximum = 120, .default = 80 }, .style = .{ .type = "string", .@"enum" = .{ "bold", "italic", "code" } } } },
            },
            .required = .{ "action", "path" },
            .conditional_requirements = .{
                .insert = .{ .require = .{ "content", "location" } },
                .replace = .{ .require = .{ "search", "replace" } },
                .delete = .{ .require = .{"search"} },
                .move = .{ .require = .{ "search", "location" } },
                .batch_replace = .{ .require = .{"content"} },
                .add_section = .{ .require = .{ "content", "location" } },
                .table_op = .{ .require = .{"table"} },
            },
        },
    },

    ////////////////////////////////////////////////////////////////////////////
    // 3. validate_document – Compliance & QA                                   //
    ////////////////////////////////////////////////////////////////////////////
    .validate_document = .{
        .description = "Comprehensive validation pipeline enforcing structure, links, metadata, accessibility, and corporate style guides. Generates machine-readable reports (JSON) and human summaries.",
        .usage_guidelines = "Read-only diagnostics. NEVER alters source files.",
        .params = .{
            .type = "object",
            .properties = .{
                .action = .{ .type = "string", .@"enum" = .{ "full", "structure", "links", "spelling", "style", "metadata", "accessibility" }, .description = "Validation scope" },
                .paths = .{ .type = "array", .items = .{ .type = "string" }, .minItems = 1, .description = "Files to validate" },
                .fail_fast = .{ .type = "boolean", .default = false },
                .max_errors = .{ .type = "integer", .minimum = 1, .default = 200 },
                .output = .{ .type = "string", .@"enum" = .{ "json", "markdown", "text", "summary" }, .default = "json" },
                .link_opts = .{ .type = "object", .properties = .{ .check_external = .{ .type = "boolean", .default = false }, .timeout_ms = .{ .type = "integer", .default = 5000 } } },
                .style_profile = .{ .type = "string", .@"enum" = .{ "default", "strict", "academic", "technical" }, .default = "default" },
                .spell_lang = .{ .type = "string", .default = "en_US" },
            },
            .required = .{ "action", "paths" },
        },
    },

    ////////////////////////////////////////////////////////////////////////////
    // 4. transform_document – Generation & Conversion                          //
    ////////////////////////////////////////////////////////////////////////////
    .transform_document = .{
        .description = "High-fidelity generation and multi-format conversion engine supporting corporate templates and style theming. Guarantees reversible operations via source preservation.",
        .usage_guidelines = "Converts or generates documents. For post-edit formatting use EngineerContent.",
        .params = .{
            .type = "object",
            .properties = .{
                .action = .{ .type = "string", .@"enum" = .{ "generate", "list_templates", "save_template", "update_template", "convert" }, .description = "Transformation task" },
                .template = .{ .type = "string", .description = "Template name or path" },
                .vars = .{ .type = "object", .description = "Template variables" },
                .source = .{ .type = "string", .description = "Source file for conversion" },
                .target = .{ .type = "string", .description = "Target file path" },
                .format = .{ .type = "string", .@"enum" = .{ "html", "pdf", "docx", "latex", "epub" } },
                .style = .{ .type = "object", .properties = .{ .theme = .{ .type = "string", .@"enum" = .{ "github", "academic", "minimal", "pro" }, .default = "github" }, .css = .{ .type = "string" } } },
                .pdf = .{ .type = "object", .properties = .{ .page_size = .{ .type = "string", .@"enum" = .{ "A4", "Letter" }, .default = "A4" }, .margin = .{ .type = "string", .default = "1in" } } },
                .preserve_meta = .{ .type = "boolean", .default = true },
            },
            .required = .{"action"},
            .conditional_requirements = .{
                .generate = .{ .require = .{ "template", "target" } },
                .convert = .{ .require = .{ "source", "target", "format" } },
            },
        },
    },

    ////////////////////////////////////////////////////////////////////////////
    // 5. orchestrate_workflow – Pipeline & Batch Engine                         //
    ////////////////////////////////////////////////////////////////////////////
    .orchestrate_workflow = .{
        .description = "Enterprise workflow orchestrator enabling sequential pipelines, parallel batches, and hybrid processing with checkpointing, retries, and audit logging.",
        .usage_guidelines = "Designed for multi-step automation across tools. Use ManageFileSystem for raw FS operations.",
        .params = .{
            .type = "object",
            .properties = .{
                .mode = .{ .type = "string", .@"enum" = .{ "pipeline", "batch", "hybrid" } },
                .pipeline = .{ .type = "array", .items = .{ .type = "object", .properties = .{ .tool = .{ .type = "string", .@"enum" = .{ "engineer_content", "validate_document", "transform_document", "access_document" } }, .params = .{ .type = "object" }, .on_error = .{ .type = "string", .@"enum" = .{ "halt", "continue", "retry", "rollback" }, .default = "halt" }, .retry = .{ .type = "integer", .minimum = 0, .maximum = 3, .default = 0 } }, .required = .{ "tool", "params" } } },
                .batch = .{ .type = "array", .items = .{ .type = "object", .properties = .{ .tool = .{ .type = "string", .@"enum" = .{ "engineer_content", "validate_document", "transform_document" } }, .params = .{ .type = "object" }, .concurrency = .{ .type = "integer", .minimum = 1, .maximum = 10, .default = 3 } }, .required = .{ "tool", "params" } } },
                .audit = .{ .type = "boolean", .default = true },
                .dry_run = .{ .type = "boolean", .default = false },
            },
            .required = .{"mode"},
            .conditional_requirements = .{
                .pipeline = .{ .require = .{"pipeline"} },
                .batch = .{ .require = .{"batch"} },
                .hybrid = .{ .require = .{ "pipeline", "batch" } },
            },
        },
    },

    ////////////////////////////////////////////////////////////////////////////
    // 6. manage_file_system – Secure FS Ops                                     //
    ////////////////////////////////////////////////////////////////////////////
    .manage_file_system = .{
        .description = "Secure file-system manager with path sanitation, collision policies, and recursive safeguards.",
        .usage_guidelines = "Restricted to non-code assets. DO NOT manipulate source code without review.",
        .params = .{
            .type = "object",
            .properties = .{
                .action = .{ .type = "string", .@"enum" = .{ "create_file", "create_dir", "copy", "move", "delete_file", "delete_dir" } },
                .path = .{ .type = "string", .description = "Primary file/directory path" },
                .dest = .{ .type = "string", .description = "Destination path for copy/move" },
                .content = .{ .type = "string", .default = "" },
                .overwrite = .{ .type = "boolean", .default = false },
                .recursive = .{ .type = "boolean", .default = true },
                .if_exists = .{ .type = "string", .@"enum" = .{ "error", "overwrite", "skip" }, .default = "error" },
            },
            .required = .{"action"},
            .conditional_requirements = .{
                .create_file = .{ .require = .{"path"} },
                .create_dir = .{ .require = .{"path"} },
                .copy = .{ .require = .{ "path", "dest" } },
                .move = .{ .require = .{ "path", "dest" } },
                .delete_file = .{ .require = .{"path"} },
                .delete_dir = .{ .require = .{"path"} },
            },
        },
    },
}
